extends layout

block content
  - var teste = "dXNpbmcgTmVvLlNtYXJ0Q29udHJhY3QuRnJhbWV3b3JrOwp1c2luZyBOZW8uU21hcnRDb250cmFjdC5GcmFtZXdvcmsuU2VydmljZXMuTmVvOwp1c2luZyBTeXN0ZW07CnVzaW5nIFN5c3RlbS5OdW1lcmljczsKCm5hbWVzcGFjZSBOZW9Db250cmFjdDEKewogICAgcHVibGljIGNsYXNzIENvbnRyYWN0MSA6IFNtYXJ0Q29udHJhY3QKICAgIHsKICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTWFpbigpCiAgICAgICAgewogICAgICAgICAgICBTdG9yYWdlLlB1dChTdG9yYWdlLkN1cnJlbnRDb250ZXh0LCAiSGVsbG8iLCAiV29ybGQiKTsKICAgICAgICB9CiAgICB9Cn0K"
    - var code = new Buffer(teste, 'base64').toString('ascii');
    - var currentCode = "";
    .container-fluid
      .row.content
        .col-sm-3.sidenav
          h4 Choose Compiler       
          ul.nav.nav-pills.nav-stacked
            li.active
              a(href='#section1', data-toggle='tab') C#        
            li
              a(href='#section2', data-toggle='tab') Python (not yet)         
            li
              a(href='#section3', data-toggle='tab') Java (not yet)       
            li
              a(href='#section4', data-toggle='tab') Solidity (not yet)     
        .col-sm-9
          h2 NeoCompiler.io      
          h4
            small
              p Welcome to NeoCompiler.io, an open-source initiative for providing easy access to compilers for NEO platform.       
          h4
            small
              p We will start with classic C# code, Python (through neo-boa project) and **Solidity** (yes, we will port it from a brand new neo-solidity project).
          form(id='myform', action='/compilex')           
              .form-group
                  h4 Code:
                  .tab-content
                    #section1.tab-pane.fade.in.active
                        button.btn.btn-info(id="btn_cs_ex1")="HelloWorld.cs"
                        button.btn.btn-info(id="btn_cs_ex2")="ICO_Template.cs"
                        button.btn.btn-info(id="btn_cs_ex3")="MyCheckWitness.cs"
                        button.btn.btn-info(id="btn_cs_ex4")="Lock.cs"
                        button.btn.btn-info(id="btn_cs_ex5")="StructExample.cs"
                        textarea.form-control(id='code', name='codesend', rows='15', cols='100')=code
                    #section2.tab-pane.fade
                        textarea.form-control(id='code_python', name='codesend_python', rows='15', cols='100')="Python"            
                    #section3.tab-pane.fade
                        textarea.form-control(id='code_java', name='codesend_java', rows='15', cols='100')="Java"         
                    #section4.tab-pane.fade
                        textarea.form-control(id='code_sol', name='codesend_sol', rows='15', cols='100')="Solidity"
                  br
                  button.btn.btn-success(type="submit")="Compile"      
                  br
                  h4 Compile Warning/Errors:
                  textarea.form-control(id='codewarnerr',readonly,rows='15', cols='100', placeholder="Warning/Errors in code...")="" 
                  p *This is beta software: ConvertTask will return "FAIL" even when everything is fine. Sorry for this. If it returns "0 errors" that's OK, just ignore this message for now :)
                  br

          form(id='formdeploy', action='/deployx')           
              .form-group
                  h4 AVM (in hex):  
                  textarea.form-control(id='codeavm', name='codeavm', rows='5', cols='100', placeholder="AVM (in hex)")
                  textarea.form-control(id='opcodes', name='opcodes', readonly, rows='5', cols='100', placeholder="AVM OPCODES")
                  br
                  button.btn.btn-success(id='btn_download', style="visibility:hidden")="Download AVM"
                  p *This is beta. Download AVM may be corrupt... trust in hex codes more than binary download :)  
                  br
                  h4 ABI:   
                  textarea.form-control(id='codeabi', readonly, rows='5', cols='100', placeholder="ABI (JSON format)")
                  br
                  br
                  h4 Deploy contract to private net:
                  input(id='contracthash', name='contracthash' placeholder="Script Hash")
                  input(id='contractparams', name='contractparams' placeholder='"Parameters (in quotes)"')
                  select(name='contractreturn', id='contractreturn')
                    option 00
                    option 01
                    option 02
                    option 03
                    option 04
                    option 05
                    option 06
                    option 07
                    option 10
                    option f0
                    option ff
                  //input(id='contractreturn', name='contractreturn' placeholder="Return Code (Void=00, Bool=01, ...)")
                  input(type="checkbox", name="cbx_storage", id="cbx_storage")
                  | Storage 
                  input(type="checkbox", name="cbx_dynamicinvoke", id="cbx_dynamicinvoke")
                  | Dynamic Invoke
                  br
                  br
                  select(name='wallet_deploy')
                    option w1.wallet
                    option w2.wallet
                    option w3.wallet
                    option w4.wallet
                  button.btn.btn-success(type="submit")="Deploy"      
                  br
                  p Hex code advices:  Signature (00), Boolean (01), Integer (02), Hash160 (03), Hash256 (04), ByteArray (05), PublicKey (06), String (07), Array (10), InteropInterface (f0), Void (ff).
                  br
          form(id='formsearch', action='/searchx')           
            .form-group
                h4 Search contract in private net:
                input(id='contracthash_search', name='contracthash_search' placeholder="Script Hash")
                button.btn.btn-success(type="submit")="Search by hash"      
                br
          br
          form(id='forminvoke', action='/invokex')           
            .form-group
                h4 Invoke contract in private net:
                input(id='invokehash', name='invokehash', placeholder="Script Hash")
                input(id='invokeparams', name='invokeparams', placeholder="Script Params")
                input(id='attachneo', name='attachneo', value="0" placeholder="Send NEO")
                select(name='wallet_invoke')
                  option w1.wallet
                  option w2.wallet
                  option w3.wallet
                  option w4.wallet
                button.btn.btn-success(type="submit")="Invoke by hash"      
                br
                p Wallet public hashes:
                p w1: AK2nJJpJr6o664CWJKi1QRXjqeic2zRp8y/031a6c6fbbdf02ca351745fa86b9ba5a9452d785ac4f7fc2b7548ca2a46c4fcf4a
                p w2: APLJBPhtRg2XLhtpxEHd6aRNL7YSLGH2ZL/036245f426b4522e8a2901be6ccc1f71e37dc376726cc6665d80c5997e240568fb
                p w3: AXxCjds5Fxy7VSrriDMbCrSRTxpRdvmLtx/0303897394935bb5418b1c1c4cf35513e276c6bd313ddd1330f113ec3dc34fbd0d
                p w4: AQaJZTKshTQzcCKmsaoNVrtSP1pEB3Utn9/02e2baf21e36df2007189d05b9e682f4192a101dcdf07eed7d6313625a930874b4
                br

                        
          h4 Private Net Messages:
          textarea.form-control(id='contractmessages', readonly, rows='15', cols='100', placeholder="Contract messages...")
          textarea.form-control(id='contractmessagesnotify', readonly, rows='5', cols='100', placeholder="Contract messages Notify...")
          br
          br    
          p Utility: convert String to Hex
          input(id='stringtohash', placeholder="String to Hash")
          button.btn.btn-info(id="strtohash")="String to hash"      
          input(id='stringtohash2',style="background-color:#eeeeee", readonly)
          br
          br
    script(type='text/javascript' src='https://code.jquery.com/jquery-3.2.1.min.js') 
    script.
     function hex2bin(hex) {
      var bytes = [];
      for(var i=0; i< hex.length-1; i+=2) {
        //console.log("process:'"+hex.substr(i, 2)+"'");
        bytes.push(parseInt(hex.substr(i, 2), 16));
      }
      str = String.fromCharCode.apply(String, bytes);
      return str;
     }
     
     $("#strtohash")[0].onclick=function(){
       var i = 0;
       $("#stringtohash2").val("");
       for(i = 0;i<$("#stringtohash").val().length;i++){
           $("#stringtohash2").val($("#stringtohash2").val()+$("#stringtohash").val().charCodeAt(i).toString(16));
         }
     };
     
     // https://github.com/neo-project/neo/blob/master/neo/SmartContract/ContractParameterType.cs
     // https://github.com/CityOfZion/neo-python/blob/master/neo/SmartContract/ContractParameterType.py
     function getHexForType(stype) {
       if(stype=="Signature")
         return '00';
       else if (stype=="Boolean")
         return '01';
       else if (stype=="Integer")
         return '02';
       else if (stype=="Hash160")
         return '03';
       else if (stype=="Hash256")
         return '04';
       else if (stype=="ByteArray")
         return '05';
       else if (stype=="PublicKey")
         return '06';
       else if (stype=="String")
         return '07';
       else if (stype=="Array")
         return '10'; // object[]
       else if (stype=="InteropInterface")
         return 'f0';
       else if(stype=="Void")
         return 'ff';
       else
         return '05';
     }
     
     // Calculate gas cost 
     //https://github.com/neo-project/docs/blob/master/en-us/sc/systemfees.md
     
     // https://github.com/neo-project/neo-vm/blob/master/src/neo-vm/OpCode.cs
     function parseOpcode(opcode, hexavm) {
       var pvalue = parseInt(opcode, 16);
       if(opcode == "00")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH0\t#An empty array of bytes is pushed onto the stack\n");
       else if((pvalue >= 1) && (pvalue <= 75)) {
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSHBYTES"+pvalue+"\t # ");
         var i=0;
         var spush = "";
         for(i=0; i<pvalue; i++) {
           var codepush = ""+hexavm[0]+hexavm[1];
           hexavm = hexavm.substr(2,hexavm.length);
           $("#opcodes").text($("#opcodes").text() + codepush);
            spush += String.fromCharCode(parseInt(codepush, 16));         
         }
         $("#opcodes").text($("#opcodes").text() +" \""+spush+"\" ");
         $("#opcodes").text($("#opcodes").text() +" # 0x01-0x4B The next opcode bytes is data to be pushed onto the stack\n");
       }
       //else if(opcode == "01")
       // $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSHBYTES1\t#0x01-0x4B The next opcode bytes is data to be pushed onto the stack\n");
       //else if(opcode == "4b")
       //  $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSHBYTES75\t#\n");
       else if(opcode == "4c")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSHDATA1\t#The next byte contains the number of bytes to be pushed onto the stack\n");
       else if(opcode == "4d")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSHDATA2\t#The next two bytes contain the number of bytes to be pushed onto the stack\n");
       else if(opcode == "4e")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSHDATA4\t#The next four bytes contain the number of bytes to be pushed onto the stack.\n");
       else if(opcode == "4f")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSHM1\t#The number -1 is pushed onto the stack.\n");
       else if(opcode == "51")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH1\t# The number 1 is pushed onto the stack.\n");
       else if(opcode == "52")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH2\t# The number 2 is pushed onto the stack.\n");
       else if(opcode == "53")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH3\t# The number 3 is pushed onto the stack.\n");
       else if(opcode == "54")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH4\t# The number 4 is pushed onto the stack.\n");
       else if(opcode == "55")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH5\t# The number 5 is pushed onto the stack.\n");
       else if(opcode == "56")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH6\t# The number 6 is pushed onto the stack.\n");
       else if(opcode == "57")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH7\t# The number 7 is pushed onto the stack.\n");
       else if(opcode == "58")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH8\t# The number 8 is pushed onto the stack.\n");
       else if(opcode == "59")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH9\t# The number 9 is pushed onto the stack.\n");
       else if(opcode == "5a")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH10\t# The number 10 is pushed onto the stack.\n");
       else if(opcode == "5b")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH11\t# The number 11 is pushed onto the stack.\n");
       else if(opcode == "5c")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH12\t# The number 12 is pushed onto the stack.\n");
       else if(opcode == "5d")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH13\t# The number 13 is pushed onto the stack.\n");
       else if(opcode == "5e")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH14\t# The number 14 is pushed onto the stack.\n");
       else if(opcode == "5f")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH15\t# The number 15 is pushed onto the stack.\n");
       else if(opcode == "60")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPUSH16\t# The number 16 is pushed onto the stack.\n");
       else if(opcode == "61")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNOP\t# Does nothing.\n");
       else if(opcode == "62"){
         $("#opcodes").text($("#opcodes").text() + opcode + "\tJMP\t# ");
         var nparfunc = ""+hexavm[0]+hexavm[1];
         hexavm = hexavm.substr(2,hexavm.length);
         $("#opcodes").text($("#opcodes").text() + nparfunc + "\n");
       }
       else if(opcode == "63") {
         $("#opcodes").text($("#opcodes").text() + opcode + "\tJMPIF\t# ");
         var nparfunc = ""+hexavm[0]+hexavm[1];
         hexavm = hexavm.substr(2,hexavm.length);
         $("#opcodes").text($("#opcodes").text() + nparfunc + "\n");
       }
       else if(opcode == "64") {
         $("#opcodes").text($("#opcodes").text() + opcode + "\tJMPIFNOT\t# ");
         var nparfunc = ""+hexavm[0]+hexavm[1];
         hexavm = hexavm.substr(2,hexavm.length);
         $("#opcodes").text($("#opcodes").text() + nparfunc + "\n");
       }
       else if(opcode == "65")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tCALL\t# \n");
       else if(opcode == "66")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tRET\t# \n");
       else if(opcode == "67")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tAPPCALL\t# \n");
       else if(opcode == "68") {
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSYSCALL\t# ");
         var nparfunc = ""+hexavm[0]+hexavm[1];
         hexavm = hexavm.substr(2,hexavm.length);
         fvalue = parseInt(nparfunc, 16);
         sfunc = "";
         var i=0;
         for(i=0; i<fvalue; i++) {
           var codepush = ""+hexavm[0]+hexavm[1];
           hexavm = hexavm.substr(2,hexavm.length);
           var cvalue = String.fromCharCode(parseInt(codepush, 16));
           sfunc += cvalue;
           if(sfunc == "Neo.Storage")
              $("#cbx_storage")[0].checked  = true;
           $("#opcodes").text($("#opcodes").text() + cvalue);           
         }
         $("#opcodes").text($("#opcodes").text() + "\n");
       }
       else if(opcode == "69")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tTAILCALL\t# \n");
       else if(opcode == "6a")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tDUPFROMALTSTACK\t# \n");
       else if(opcode == "6b")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tTOALTSTACK\t# Puts the input onto the top of the alt stack. Removes it from the main stack.\n");
       else if(opcode == "6c")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tFROMALTSTACK\t# Puts the input onto the top of the main stack. Removes it from the alt stack.\n");
       else if(opcode == "6d")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tXDROP\t# \n");
       else if(opcode == "72")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tXSWAP\t# \n");
       else if(opcode == "73")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tXTUCK\t# \n");
       else if(opcode == "74")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tDEPTH\t# Puts the number of stack items onto the stack.\n");
       else if(opcode == "75")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tDROP\t# Removes the top stack item.\n");
       else if(opcode == "76")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tDUP\t# Duplicates the top stack item.\n");
       else if(opcode == "77")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNIP\t# Removes the second-to-top stack item.\n");
       else if(opcode == "78")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tOVER\t# Copies the second-to-top stack item to the top.\n");
       else if(opcode == "79")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPICK\t# The item n back in the stack is copied to the top.\n");
       else if(opcode == "7a")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tROLL\t# The item n back in the stack is moved to the top.\n");
       else if(opcode == "7b")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tROT\t# The top three items on the stack are rotated to the left.\n");
       else if(opcode == "7c")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSWAP\t# The top two items on the stack are swapped.\n");
       else if(opcode == "7d")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tTUCK\t# The item at the top of the stack is copied and inserted before the second-to-top item.\n");
       else if(opcode == "7e")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tCAT\t# Concatenates two strings.\n");
       else if(opcode == "7f")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSUBSTR\t# Returns a section of a string.\n");
       else if(opcode == "80")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tLEFT\t# Keeps only characters left of the specified point in a string.\n");
       else if(opcode == "81")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tRIGHT\t# Keeps only characters right of the specified point in a string.\n");
       else if(opcode == "82")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSIZE\t# Returns the length of the input string.\n");
       else if(opcode == "83")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tINVERT\t# Flips all of the bits in the input.\n");
       else if(opcode == "84")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tAND\t# Boolean and between each bit in the inputs.\n");
       else if(opcode == "85")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tOR\t# Boolean or between each bit in the inputs.\n");
       else if(opcode == "86")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tXOR\t# Boolean exclusive or between each bit in the inputs.\n");
       else if(opcode == "87")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tEQUAL\t# Returns 1 if the inputs are exactly equal, 0 otherwise.\n");
       else if(opcode == "8b")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tINC\t# 1 is added to the input.\n");
       else if(opcode == "8c")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tDEC\t# 1 is subtracted from the input.\n");
       else if(opcode == "8d")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSIGN\t# \n");
       else if(opcode == "8f")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNEGATE\t# The sign of the input is flipped.\n");
       else if(opcode == "90")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tABS\t# The input is made positive.\n");
       else if(opcode == "91")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNOT\t# If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\n");
       else if(opcode == "92")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNZ\t# Returns 0 if the input is 0. 1 otherwise.\n");
       else if(opcode == "93")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tADD\t# a is added to b.\n");
       else if(opcode == "94")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSUB\t# b is subtracted from a.\n");
       else if(opcode == "95")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tMUL\t# a is multiplied by b.\n");
       else if(opcode == "96")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tDIV\t# a is divided by b.\n");
       else if(opcode == "97")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tMOD\t# Returns the remainder after dividing a by b.\n");
       else if(opcode == "98")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSHL\t# Shifts a left b bits, preserving sign.\n");
       else if(opcode == "99")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSHR\t# Shifts a right b bits, preserving sign.\n");
       else if(opcode == "9a")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tBOOLAND\t# If both a and b are not 0, the output is 1. Otherwise 0.\n");
       else if(opcode == "9b")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tBOOLOR\t# If a or b is not 0, the output is 1. Otherwise 0.\n");
       else if(opcode == "9c")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNUMEQUAL\t# Returns 1 if the numbers are equal, 0 otherwise.\n");
       else if(opcode == "9e")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNUMNOTEQUAL\t# Returns 1 if the numbers are not equal, 0 otherwise.\n");
       else if(opcode == "9f")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tLT\t# Returns 1 if a is less than b, 0 otherwise.\n");
       else if(opcode == "a0")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tGT\t# Returns 1 if a is greater than b, 0 otherwise.\n");
       else if(opcode == "a1")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tLTE\t# Returns 1 if a is less than or equal to b, 0 otherwise.\n");
       else if(opcode == "a2")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tGTE\t# Returns 1 if a is greater than or equal to b, 0 otherwise.\n");
       else if(opcode == "a3")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tMIN\t# Returns the smaller of a and b.\n");
       else if(opcode == "a3")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tMIN\t# Returns the smaller of a and b.\n");
       else if(opcode == "a4")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tMAX\t# Returns the larger of a and b.\n");
       else if(opcode == "a5")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tWITHIN\t# Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\n");
       else if(opcode == "a7")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSHA1\t# The input is hashed using SHA-1.\n");
       else if(opcode == "a8")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSHA256\t# The input is hashed using SHA-256.\n");
       else if(opcode == "a9")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tHASH160\t# The input is hashed using HASH160.\n");
       else if(opcode == "aa")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tHASH256\t# The input is hashed using HASH256.\n");
       else if(opcode == "ac")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tCHECKSIG\t# \n");
       else if(opcode == "ae")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tCHECKMULTISIG\t# \n");
       else if(opcode == "c0")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tARRAYSIZE\t# \n");
       else if(opcode == "c1")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPACK\t# \n");
       else if(opcode == "c2")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tUNPACK\t# \n");
       else if(opcode == "c3")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tPICKITEM\t# \n");
       else if(opcode == "c4")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tSETITEM\t# \n");
       else if(opcode == "c5")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNEWARRAY\t# \n");
       else if(opcode == "c6")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tNEWSTRUCT\t# \n");
       else if(opcode == "c8")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tAPPEND\t# \n");
       else if(opcode == "c9")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tREVERSE\t# \n");
       else if(opcode == "ca")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tREMOVE\t# \n");
       else if(opcode == "f0")
         $("#opcodes").text($("#opcodes").text() + opcode + "\tTHROW\t# \n");
       else if(opcode == "f1")
           $("#opcodes").text($("#opcodes").text() + opcode + "\tTHROWIFNOT\t# \n");
       else {
         $("#opcodes").text($("#opcodes").text() + opcode + "\t???\t# \n");
       }
       
       
       return hexavm;
     }
     
     
     
     function printOpcode(hexavm) {
       if(hexavm.length == 0)
          return; // string is empty
       if(hexavm.length % 2 == 1)
          return; // must be even pairs
       var code = ""+hexavm[0]+hexavm[1];
       hexavm = hexavm.substr(2,hexavm.length);
       //console.log("code ("+code+")");
       hexavm = parseOpcode(code, hexavm);
       
       printOpcode(hexavm);
     }
     
     $("#myform").submit(function(e) {
      $("#codewarnerr").val("");
      e.preventDefault(); // Prevents the page from refreshing
      var $this = $(this); // `this` refers to the current form element
      var indata = $(this).serialize();
      $.post(
        $this.attr("action"), // Gets the URL to sent the post to
        indata, // Serializes form data in standard format
        function(data) {
            var coderr = atob(data.output);
            $("#codewarnerr").val(coderr);
            var hexcodeavm = atob(data.avm);
            $("#codeavm").val(hexcodeavm);
            hexcodeavm = hexcodeavm.replace(/(\r\n|\n|\r)/gm,"");
            $("#opcodes").text("");
            printOpcode(hexcodeavm);
            
            localStorage.setItem('avmFile', hex2bin( hexcodeavm ) );
            $("#btn_download")[0].style="";
            
            var codeabi = atob(data.abi);
            $("#codeabi").text(codeabi);
            chash=JSON.parse($('#codeabi').text())["hash"];
            $("#contracthash")[0].value = chash.substr(2,chash.length);
            $("#contracthash_search")[0].value = $("#contracthash")[0].value;
            $("#invokehash")[0].value = $("#contracthash")[0].value;
            // parse ABI json
            jsonABI = JSON.parse($('#codeabi').text());
            console.log("Parsing ABI json");
            // look for Main function
            var i = 0; 
            for(i = 0; i<jsonABI["functions"].length; i++)
                if( jsonABI["functions"][i]["name"] == "Main" ) {
                    console.log("Found function 'Main' with id="+i);
                    break;
                }
            // get parameters
            $("#contractparams")[0].value = "\"";
            var j = 0;
            console.log("Parameter count:"+jsonABI["functions"][i]["parameters"].length);
            for(j = 0; j<jsonABI["functions"][i]["parameters"].length; j++) {
               var phex=getHexForType(jsonABI["functions"][i]["parameters"][j]["type"]);
               console.log("parameter["+j+"]: "+jsonABI["functions"][i]["parameters"][j]["type"]+" -> hex("+phex+")");
               $("#contractparams")[0].value += phex;
            }
            $("#contractparams")[0].value += "\"";
            // set invoke params to many empty strings (at least one is desirable for now)
            $("#invokeparams")[0].value = "\"\"";
            for(j = 1; j<jsonABI["functions"][i]["parameters"].length; j++)
               $("#invokeparams")[0].value += " \"\"";
            // get return hexcode
            rettype=JSON.parse($('#codeabi').text())["functions"][i]["returntype"];
            $("#contractreturn")[0].value = getHexForType(rettype);
        },
        "json" // The format the response should be in
       );
     });
     
     $("#formsearch").submit(function(e) {
      $("#contractmessages").text("");
      e.preventDefault(); // Prevents the page from refreshing
      var $this = $(this); // `this` refers to the current form element
      var indata = $(this).serialize();
      $.post(
        $this.attr("action"), // Gets the URL to sent the post to
        indata, // Serializes form data in standard format
        function(data) {
          //console.log("output="+data);
          var deploymsg = atob(data.output);
          $("#contractmessages").text(deploymsg);
        },
        "json" // The format the response should be in
       );
       alert("the search action in private net can take up to 30 seconds... time for a coffee :)");
     });
     
     $("#forminvoke").submit(function(e) {
      $("#contractmessages").text("");
      e.preventDefault(); // Prevents the page from refreshing
      var $this = $(this); // `this` refers to the current form element
      var indata = $(this).serialize();
      $.post(
        $this.attr("action"), // Gets the URL to sent the post to
        indata, // Serializes form data in standard format
        function(data) {
          //console.log("output="+data);
          var deploymsg = atob(data.output);
          $("#contractmessages").text(deploymsg);
          $("#contractmessagesnotify").text("");
          
          var indexNotify = $("#contractmessages").text().indexOf("SmartContract.Runtime.Notify");
          while(indexNotify != -1)
          {
            var i = 0;
            var snotify = "";
            //console.log("found Notiy at "+indexNotify);
            while($("#contractmessages").text()[indexNotify+"SmartContract.Runtime.Notify".length+40+6+i] != '\n') {
              snotify += $("#contractmessages").text()[indexNotify+"SmartContract.Runtime.Notify".length+40+6+i]; 
              i++;
            }
            //console.log("NOTIFY:"+snotify);
            $("#contractmessagesnotify").text($("#contractmessagesnotify").text() + snotify + "\n");
            indexNotify = $("#contractmessages").text().indexOf("SmartContract.Runtime.Notify", indexNotify+1);
          }
          
        },
        "json" // The format the response should be in
       );
       alert("the invoke action in private net can take up to 30 seconds... time for a coffee :)");
     });
     
     $("#formdeploy").submit(function(e) {
      $("#contractmessages").text("");
      e.preventDefault(); // Prevents the page from refreshing
      var $this = $(this); // `this` refers to the current form element
      var indata = $(this).serialize();
      $.post(
        $this.attr("action"), // Gets the URL to sent the post to
        indata, // Serializes form data in standard format
        function(data) {
          //console.log("output="+data);
          var deploymsg = atob(data.output);
          $("#contractmessages").text(deploymsg);
        },
        "json" // The format the response should be in
       );
       alert("the deploy action in private net can take up to 30 seconds... time for a coffee :)");
     });
     
     $("#btn_cs_ex1").click(function (e) {
       e.preventDefault();
       $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/master/HelloWorld/HelloWorld.cs", function( data ) {
         $( "#code" )[0].value = data;
       });
     });
     $("#btn_cs_ex2").click(function (e) {
       e.preventDefault();
       $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/master/ICO_Template/ICO_Template.cs", function( data ) {
         $( "#code" )[0].value = data;
       });
     });
     $("#btn_cs_ex3").click(function (e) {
       e.preventDefault();
       $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/create_checkwitness/MyCheckWitness/MyCheckWitness.cs", function( data ) {
         $( "#code" )[0].value = data;
       });
     });
     $("#btn_cs_ex4").click(function (e) {
       e.preventDefault();
       $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/master/Lock/Lock.cs", function( data ) {
         $( "#code" )[0].value = data;
       });
     });
     $("#btn_cs_ex5").click(function (e) {
       e.preventDefault();
       $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/fix_struct_example/StructExample/Point.cs", function( data ) {
         $( "#code" )[0].value = data;
         $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/fix_struct_example/StructExample/StructExample.cs", function( data2 ) {
           $( "#code" )[0].value += data2;
         });
       });
     });
     
     
     
     
     $("#btn_download").click(function (e) {
        e.preventDefault();
        var blob = new Blob([localStorage.getItem('avmFile')]);
        var link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = "file.avm";
        link.click();
     });
