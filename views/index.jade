extends layout

block content
  - var teste = "dXNpbmcgTmVvLlNtYXJ0Q29udHJhY3QuRnJhbWV3b3JrOwp1c2luZyBOZW8uU21hcnRDb250cmFjdC5GcmFtZXdvcmsuU2VydmljZXMuTmVvOwp1c2luZyBTeXN0ZW07CnVzaW5nIFN5c3RlbS5OdW1lcmljczsKCm5hbWVzcGFjZSBOZW9Db250cmFjdDEKewogICAgcHVibGljIGNsYXNzIENvbnRyYWN0MSA6IFNtYXJ0Q29udHJhY3QKICAgIHsKICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTWFpbigpCiAgICAgICAgewogICAgICAgICAgICBTdG9yYWdlLlB1dChTdG9yYWdlLkN1cnJlbnRDb250ZXh0LCAiSGVsbG8iLCAiV29ybGQiKTsKICAgICAgICB9CiAgICB9Cn0K"
    - var code = new Buffer(teste, 'base64').toString('ascii');
    - var currentCode = "";
    .container-fluid
      .row.content
        .col-sm-3.sidenav
          h4 Choose Compiler       
          ul.nav.nav-pills.nav-stacked
            li.active
              a(href='#section1', data-toggle='tab') C#        
            li
              a(href='#section2', data-toggle='tab') Python (not yet)         
            li
              a(href='#section3', data-toggle='tab') Java (not yet)       
            li
              a(href='#section4', data-toggle='tab') Solidity (not yet)     
        .col-sm-9
          h2 NeoCompiler.io      
          h4
            small
              p Welcome to NeoCompiler.io, an open-source initiative for providing easy access to compilers for NEO platform.       
          h4
            small
              p We will start with classic C# code, Python (through neo-boa project) and **Solidity** (yes, we will port it from a brand new neo-solidity project).
          form(id='myform', action='/compilex')           
              .form-group
                  h4 Code:
                  .tab-content
                    #section1.tab-pane.fade.in.active
                        button.btn.btn-info(id="btn_cs_ex1")="HelloWorld.cs"
                        button.btn.btn-info(id="btn_cs_ex2")="ICO_Template.cs"
                        button.btn.btn-info(id="btn_cs_ex3")="MyCheckWitness.cs"
                        textarea.form-control(id='code', name='codesend', rows='15', cols='100')=code
                    #section2.tab-pane.fade
                        textarea.form-control(id='code_python', name='codesend_python', rows='15', cols='100')="Python"            
                    #section3.tab-pane.fade
                        textarea.form-control(id='code_java', name='codesend_java', rows='15', cols='100')="Java"         
                    #section4.tab-pane.fade
                        textarea.form-control(id='code_sol', name='codesend_sol', rows='15', cols='100')="Solidity"
                  br
                  button.btn.btn-success(type="submit")="Compile"      
                  br
                  h4 Compile Warning/Errors:
                  textarea.form-control(id='codewarnerr',rows='15', cols='100', placeholder="Warning/Errors in code...")="" 
                  p *This is beta software: ConvertTask will return "FAIL" even when everything is fine. Sorry for this. If it returns "0 errors" that's OK, just ignore this message for now :)
                  br

          form(id='formdeploy', action='/deployx')           
              .form-group
                  h4 AVM (in hex):  
                  textarea.form-control(id='codeavm', name='codeavm' rows='5', cols='100', placeholder="AVM (in hex)")
                  br
                  button.btn.btn-success(id='btn_download', style="visibility:hidden")="Download AVM"
                  p *This is beta. Download AVM may be corrupt... trust in hex codes more than binary download :)  
                  br
                  br
                          
                  h4 ABI:   
                  textarea.form-control(id='codeabi',rows='5', cols='100', placeholder="ABI (JSON format)")
                  br
                  br
                  h4 Deploy contract to private net:
                  input(id='contracthash', name='contracthash' placeholder="Script Hash")
                  input(id='contractparams', name='contractparams' placeholder='"Parameters (in quotes)"')
                  select(name='contractreturn', id='contractreturn')
                    option 00
                    option 01
                    option 02
                    option 03
                    option 04
                    option 05
                    option 06
                    option 07
                    option 10
                    option f0
                    option ff
                  //input(id='contractreturn', name='contractreturn' placeholder="Return Code (Void=00, Bool=01, ...)")
                  input(type="checkbox", name="cbx_storage")
                  | Storage 
                  input(type="checkbox", name="cbx_dynamicinvoke")
                  | Dynamic Invoke
                  br
                  br
                  select(name='wallet_deploy')
                    option w1.wallet
                    option w2.wallet
                    option w3.wallet
                    option w4.wallet
                  button.btn.btn-success(type="submit")="Deploy"      
                  br
                  p Hex code advices:  Signature (00), Boolean (01), Integer (02), Hash160 (03), Hash256 (04), ByteArray (05), PublicKey (06), String (07), Array (10), InteropInterface (f0), Void (ff).
                  br
          form(id='formsearch', action='/searchx')           
            .form-group
                h4 Search contract in private net:
                input(id='contracthash_search', name='contracthash_search' placeholder="Script Hash")
                button.btn.btn-success(type="submit")="Search by hash"      
                br
                br
          form(id='forminvoke', action='/invokex')           
            .form-group
                h4 Invoke contract in private net:
                input(id='invokehash', name='invokehash' placeholder="Script Hash")
                input(id='invokeparams', name='invokeparams' placeholder="Script Params")
                select(name='wallet_invoke')
                  option w1.wallet
                  option w2.wallet
                  option w3.wallet
                  option w4.wallet
                button.btn.btn-success(type="submit")="Invoke by hash"      
                br
                br


            
                        
          h4 Private Net Messages:
          textarea.form-control(id='contractmessages',rows='15', cols='100', placeholder="Contract messages...")
          br    
    script(type='text/javascript' src='https://code.jquery.com/jquery-3.2.1.min.js') 
    script.
     function hex2bin(hex) {
      var bytes = [];
      for(var i=0; i< hex.length-1; i+=2) {
        //console.log("process:'"+hex.substr(i, 2)+"'");
        bytes.push(parseInt(hex.substr(i, 2), 16));
      }
      str = String.fromCharCode.apply(String, bytes);
      return str;
     }
     
     // https://github.com/neo-project/neo/blob/master/neo/SmartContract/ContractParameterType.cs
     // https://github.com/CityOfZion/neo-python/blob/master/neo/SmartContract/ContractParameterType.py
     function getHexForType(stype) {
       if(stype=="Signature")
         return '00';
       else if (stype=="Boolean")
         return '01';
       else if (stype=="Integer")
         return '02';
       else if (stype=="Hash160")
         return '03';
       else if (stype=="Hash256")
         return '04';
       else if (stype=="ByteArray")
         return '05';
       else if (stype=="PublicKey")
         return '06';
       else if (stype=="String")
         return '07';
       else if (stype=="Array")
         return '10'; // object[]
       else if (stype=="InteropInterface")
         return 'f0';
       else if(stype=="Void")
         return 'ff';
       else
         return '05';
     }
     
     $("#myform").submit(function(e) {
      $("#codewarnerr").text("");
      e.preventDefault(); // Prevents the page from refreshing
      var $this = $(this); // `this` refers to the current form element
      var indata = $(this).serialize();
      $.post(
        $this.attr("action"), // Gets the URL to sent the post to
        indata, // Serializes form data in standard format
        function(data) {
            var coderr = atob(data.output);
            $("#codewarnerr").text(coderr);
            var hexcodeavm = atob(data.avm);
            $("#codeavm").text(hexcodeavm);
            localStorage.setItem('avmFile', hex2bin( hexcodeavm.replace(/(\r\n|\n|\r)/gm,"") ) );
            $("#btn_download")[0].style="";
            
            var codeabi = atob(data.abi);
            $("#codeabi").text(codeabi);
            chash=JSON.parse($('#codeabi').text())["hash"];
            $("#contracthash")[0].value = chash.substr(2,chash.length);
            $("#contracthash_search")[0].value = $("#contracthash")[0].value;
            $("#invokehash")[0].value = $("#contracthash")[0].value;
            // parse ABI json
            jsonABI = JSON.parse($('#codeabi').text());
            console.log("Parsing ABI json");
            // look for Main function
            var i = 0; 
            for(i = 0; i<jsonABI["functions"].length; i++)
                if( jsonABI["functions"][i]["name"] == "Main" ) {
                    console.log("Found function 'Main' with id="+i);
                    break;
                }
            // get parameters
            $("#contractparams")[0].value = "\"";
            var j = 0;
            console.log("Parameter count:"+jsonABI["functions"][i]["parameters"].length);
            for(j = 0; j<jsonABI["functions"][i]["parameters"].length; j++) {
               var phex=getHexForType(jsonABI["functions"][i]["parameters"][j]["type"]);
               console.log("parameter["+j+"]: "+jsonABI["functions"][i]["parameters"][j]["type"]+" -> hex("+phex+")");
               $("#contractparams")[0].value += phex;
            }
            $("#contractparams")[0].value += "\"";
            // set invoke params to many empty strings (at least one is desirable for now)
            $("#invokeparams")[0].value = "\"\"";
            for(j = 1; j<jsonABI["functions"][i]["parameters"].length; j++)
               $("#invokeparams")[0].value += " \"\"";
            // get return hexcode
            rettype=JSON.parse($('#codeabi').text())["functions"][i]["returntype"];
            $("#contractreturn")[0].value = getHexForType(rettype);
        },
        "json" // The format the response should be in
       );
     });
     
     $("#formsearch").submit(function(e) {
      $("#contractmessages").text("");
      e.preventDefault(); // Prevents the page from refreshing
      var $this = $(this); // `this` refers to the current form element
      var indata = $(this).serialize();
      $.post(
        $this.attr("action"), // Gets the URL to sent the post to
        indata, // Serializes form data in standard format
        function(data) {
          //console.log("output="+data);
          var deploymsg = atob(data.output);
          $("#contractmessages").text(deploymsg);
        },
        "json" // The format the response should be in
       );
       alert("the search action in private net can take up to 30 seconds... time for a coffee :)");
     });
     
     $("#forminvoke").submit(function(e) {
      $("#contractmessages").text("");
      e.preventDefault(); // Prevents the page from refreshing
      var $this = $(this); // `this` refers to the current form element
      var indata = $(this).serialize();
      $.post(
        $this.attr("action"), // Gets the URL to sent the post to
        indata, // Serializes form data in standard format
        function(data) {
          //console.log("output="+data);
          var deploymsg = atob(data.output);
          $("#contractmessages").text(deploymsg);
        },
        "json" // The format the response should be in
       );
       alert("the invoke action in private net can take up to 30 seconds... time for a coffee :)");
     });
     
     $("#formdeploy").submit(function(e) {
      $("#contractmessages").text("");
      e.preventDefault(); // Prevents the page from refreshing
      var $this = $(this); // `this` refers to the current form element
      var indata = $(this).serialize();
      $.post(
        $this.attr("action"), // Gets the URL to sent the post to
        indata, // Serializes form data in standard format
        function(data) {
          //console.log("output="+data);
          var deploymsg = atob(data.output);
          $("#contractmessages").text(deploymsg);
        },
        "json" // The format the response should be in
       );
       alert("the deploy action in private net can take up to 30 seconds... time for a coffee :)");
     });
     
     $("#btn_cs_ex1").click(function (e) {
       e.preventDefault();
       $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/master/HelloWorld/HelloWorld.cs", function( data ) {
         $( "#code" )[0].value = data;
       });
     });
     $("#btn_cs_ex2").click(function (e) {
       e.preventDefault();
       $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/master/ICO_Template/ICO_Template.cs", function( data ) {
         $( "#code" )[0].value = data;
       });
     });
     $("#btn_cs_ex3").click(function (e) {
       e.preventDefault();
       $.get( "https://raw.githubusercontent.com/NeoResearch/examples-csharp/create_checkwitness/MyCheckWitness/MyCheckWitness.cs", function( data ) {
         $( "#code" )[0].value = data;
       });
     });
     
     $("#btn_download").click(function (e) {
        e.preventDefault();
        var blob = new Blob([localStorage.getItem('avmFile')]);
        var link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = "file.avm";
        link.click();
     });
